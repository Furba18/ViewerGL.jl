ViewerGL.Viewer(GLFW.Window(Ptr{Nothing} @0x00007fea84389a90), 2880, 1710, 2.0, 2.0, 60.0, [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], 0.0, 0.0, 0.0, 25.890625, -20.234375, 0, ViewerGL.GLMesh[GLMesh(4, [2.0 0.0 0.0 -1.0; 0.0 2.0 0.0 -1.0; 0.0 0.0 2.0 -1.0; 0.0 0.0 0.0 1.0], GLVertexArray(-1), GLVertexBuffer(-1, Float32[0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0]), GLVertexBuffer(-1, Float32[0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0]), GLVertexBuffer(-1, Float32[]))], Dict{Any,Any}((false, false)=>GLShader("\n#define LIGHTING_ENABLED        0\n#define COLOR_ATTRIBUTE_ENABLED 0\n\nuniform mat4 u_modelview_matrix;\nuniform mat4 u_projection_matrix;\nuniform vec4 u_color;\n\nattribute  vec4 a_position;\n\n#if LIGHTING_ENABLED\nattribute  vec3 a_normal;\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\nattribute vec4 a_color;\n#endif\n\n#if LIGHTING_ENABLED\nuniform mat3 u_normal_matrix;\nuniform vec3 u_light_position;\nvarying vec3 v_normal;\nvarying vec3 v_light_dir;\nvarying vec3 v_eye_vec;\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\nvarying vec4 v_color;\n#endif\n\nvoid main()\n{\n\tvec4 eye_pos= u_modelview_matrix * a_position;\n\n#if LIGHTING_ENABLED\n\tv_normal = u_normal_matrix * a_normal;\n\tvec3 vVertex = vec3(u_modelview_matrix * a_position);\n\tv_light_dir  = normalize(u_light_position - vVertex);\n\tv_eye_vec    = normalize(-vVertex);\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\n\tv_color=a_color;\n#endif\n\n\tgl_Position = u_projection_matrix * eye_pos;\n}\n", "\n#define LIGHTING_ENABLED        0\n#define COLOR_ATTRIBUTE_ENABLED 0\n\nuniform vec4 u_color;\n\n#if LIGHTING_ENABLED\nvarying vec3 v_normal;\nvarying vec3 v_light_dir;\nvarying vec3 v_eye_vec;\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\nvarying vec4 v_color;\n#endif\n\nvoid main()\n{\n\tvec4 frag_color=u_color;\n\n  #if LIGHTING_ENABLED\n\tvec3 N = normalize(v_normal   );\n\tvec3 L = normalize(v_light_dir);\n\tvec3 E = normalize(v_eye_vec  );\n\n\tvec4  u_material_ambient  = vec4(0.2,0.2,0.2,1.0);\n\tvec4  u_material_diffuse  = vec4(0.8,0.8,0.8,1.0);\n\tvec4  u_material_specular = vec4(0.1,0.1,0.1,1.0);\n\tfloat u_material_shininess=100.0;\n\n\tif(gl_FrontFacing)\n\t{\n\t\tfrag_color = u_material_ambient;\n\t\tfloat NdotL = abs(dot(N,L));\n\t\tif (NdotL>0.0)\n\t\t\t{\n\t\t\tvec3 R = reflect(-L, N);\n\t\t\tfloat NdotHV = abs(dot(R, E));\n\t\t\tfrag_color += u_material_diffuse * NdotL;\n\t\t\tfrag_color += u_material_specular * pow(NdotHV,u_material_shininess);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfrag_color = u_material_ambient;\n\t\tfloat NdotL = abs(dot(-N,L));\n\t\tif (NdotL>0.0);\n\t\t{\n\t\t\tvec3 R = reflect(-L, -N);\n\t\t\tfloat NdotHV=abs(dot(R, E));\n\t\t\tfrag_color += u_material_diffuse * NdotL;\n\t\t\tfrag_color += u_material_specular * pow(NdotHV,u_material_shininess);\n\t\t}\n\t}\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\n\tfrag_color =v_color;\n#endif\n\n\tgl_FragColor = frag_color;\n}\n", -1, -1, -1),(true, false)=>GLShader("\n#define LIGHTING_ENABLED        1\n#define COLOR_ATTRIBUTE_ENABLED 0\n\nuniform mat4 u_modelview_matrix;\nuniform mat4 u_projection_matrix;\nuniform vec4 u_color;\n\nattribute  vec4 a_position;\n\n#if LIGHTING_ENABLED\nattribute  vec3 a_normal;\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\nattribute vec4 a_color;\n#endif\n\n#if LIGHTING_ENABLED\nuniform mat3 u_normal_matrix;\nuniform vec3 u_light_position;\nvarying vec3 v_normal;\nvarying vec3 v_light_dir;\nvarying vec3 v_eye_vec;\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\nvarying vec4 v_color;\n#endif\n\nvoid main()\n{\n\tvec4 eye_pos= u_modelview_matrix * a_position;\n\n#if LIGHTING_ENABLED\n\tv_normal = u_normal_matrix * a_normal;\n\tvec3 vVertex = vec3(u_modelview_matrix * a_position);\n\tv_light_dir  = normalize(u_light_position - vVertex);\n\tv_eye_vec    = normalize(-vVertex);\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\n\tv_color=a_color;\n#endif\n\n\tgl_Position = u_projection_matrix * eye_pos;\n}\n", "\n#define LIGHTING_ENABLED        1\n#define COLOR_ATTRIBUTE_ENABLED 0\n\nuniform vec4 u_color;\n\n#if LIGHTING_ENABLED\nvarying vec3 v_normal;\nvarying vec3 v_light_dir;\nvarying vec3 v_eye_vec;\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\nvarying vec4 v_color;\n#endif\n\nvoid main()\n{\n\tvec4 frag_color=u_color;\n\n  #if LIGHTING_ENABLED\n\tvec3 N = normalize(v_normal   );\n\tvec3 L = normalize(v_light_dir);\n\tvec3 E = normalize(v_eye_vec  );\n\n\tvec4  u_material_ambient  = vec4(0.2,0.2,0.2,1.0);\n\tvec4  u_material_diffuse  = vec4(0.8,0.8,0.8,1.0);\n\tvec4  u_material_specular = vec4(0.1,0.1,0.1,1.0);\n\tfloat u_material_shininess=100.0;\n\n\tif(gl_FrontFacing)\n\t{\n\t\tfrag_color = u_material_ambient;\n\t\tfloat NdotL = abs(dot(N,L));\n\t\tif (NdotL>0.0)\n\t\t\t{\n\t\t\tvec3 R = reflect(-L, N);\n\t\t\tfloat NdotHV = abs(dot(R, E));\n\t\t\tfrag_color += u_material_diffuse * NdotL;\n\t\t\tfrag_color += u_material_specular * pow(NdotHV,u_material_shininess);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfrag_color = u_material_ambient;\n\t\tfloat NdotL = abs(dot(-N,L));\n\t\tif (NdotL>0.0);\n\t\t{\n\t\t\tvec3 R = reflect(-L, -N);\n\t\t\tfloat NdotHV=abs(dot(R, E));\n\t\t\tfrag_color += u_material_diffuse * NdotL;\n\t\t\tfrag_color += u_material_specular * pow(NdotHV,u_material_shininess);\n\t\t}\n\t}\n#endif\n\n#if COLOR_ATTRIBUTE_ENABLED\n\tfrag_color =v_color;\n#endif\n\n\tgl_FragColor = frag_color;\n}\n", -1, -1, -1)))